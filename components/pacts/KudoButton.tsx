// components/pacts/KudoButton.tsx
'use client';

import { useState, useTransition } from 'react';
import { toggleKudo } from '@/lib/actions/kudo.actions';
import { Button } from '@/components/ui/button';
import { cn } from '@/lib/utils'; // tailwind-merge ‡¶è‡¶¨‡¶Ç clsx-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø

type KudoButtonProps = {
  pactId: string;
  checkInId: string;
  initialKudosCount: number;
  userHasKudoed: boolean;
};

export function KudoButton({ pactId, checkInId, initialKudosCount, userHasKudoed }: KudoButtonProps) {
  const [isPending, startTransition] = useTransition();

  // Optimistic UI-‡¶è‡¶∞ ‡¶ú‡¶®‡ßç‡¶Ø State
  const [optimisticKudosCount, setOptimisticKudosCount] = useState(initialKudosCount);
  const [optimisticHasKudoed, setOptimisticHasKudoed] = useState(userHasKudoed);

  const handleClick = () => {
    startTransition(async () => {
      // Optimistic Update: ‡¶∏‡¶ô‡ßç‡¶ó‡ßá ‡¶∏‡¶ô‡ßç‡¶ó‡ßá UI ‡¶™‡¶∞‡¶ø‡¶¨‡¶∞‡ßç‡¶§‡¶® ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
      if (optimisticHasKudoed) {
        setOptimisticHasKudoed(false);
        setOptimisticKudosCount((prev) => prev - 1);
      } else {
        setOptimisticHasKudoed(true);
        setOptimisticKudosCount((prev) => prev + 1);
      }
      // ‡¶¨‡ßç‡¶Ø‡¶æ‡¶ï‡¶ó‡ßç‡¶∞‡¶æ‡¶â‡¶®‡ßç‡¶°‡ßá ‡¶∏‡¶æ‡¶∞‡ßç‡¶≠‡¶æ‡¶∞ ‡¶Ö‡ßç‡¶Ø‡¶æ‡¶ï‡¶∂‡¶®‡¶ü‡¶ø ‡¶ï‡¶≤ ‡¶ï‡¶∞‡¶æ ‡¶π‡¶ö‡ßç‡¶õ‡ßá
      await toggleKudo(checkInId, pactId);
    });
  };

  return (
    <Button
      variant="ghost"
      size="sm"
      onClick={handleClick}
      disabled={isPending}
      className={cn("flex items-center gap-2", {
        "text-pink-500 hover:text-pink-600": optimisticHasKudoed,
        "text-muted-foreground hover:text-foreground": !optimisticHasKudoed,
      })}
    >
      <span className="text-lg">üíñ</span>
      <span>{optimisticKudosCount}</span>
      <span className="sr-only">Kudos</span>
    </Button>
  );
}